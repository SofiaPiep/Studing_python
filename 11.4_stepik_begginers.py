# часть 11.4

# # 1. Дополните приведенный код, так чтобы он вывел сумму квадратов элементов списка numbers.
# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# numbers1=[]
# for i in range(len(numbers)):
#     numbers1.append(numbers[i]**2)
# print(sum(numbers1))
#2.
# n =int(input())
# list2 =[]
# d=0
# list3=[]
# f=0
# for i in range(n):
#    d=int(input())
#    list2.append(d)
#    f = (d+1)**2
#    list3.append(f)
# print(*list2,sep='\n')
# print()
# print(*list3,sep='\n')

#3. При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.
#На вход программе подается натуральное число n, а затем n различных натуральных чисел.
# Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел,
# а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
# Получаем количество чисел n
# n = int(input())
# l = []
# for i in range(n):
#     num = int(input())
#     l.append(num)
# for a in l:
#     if a != min(l) and a != max(l):
#         print(a)

# Без дубликатов.
# На вход программе подается натуральное число n, а затем nn строк.
# Напишите программу, которая выводит только уникальные строки в том же порядке, в котором они были введены изначально.
# dat = []
# n = int(input())
# for _ in range(n):
#     el = input()
#     if el not in dat:
#         dat.append(el)
#         print(el)
# Google search — 1
# На вход программе подается натуральное число nn, затем nn строк, затем еще одна строка — поисковый запрос.
# Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.

# n = int(input())
# strings = []  # Инициализируем пустой список strings для хранения введенных строк
# # Запускаем цикл, который будет выполняться n раз
# for _ in range(n):
#     s = input()        # Получаем строки s
#     strings.append(s)  # Добавляем строку s в список strings
# search_query = input()  # Получаем строку для поиска
# # Проходим по каждой строке s в списке strings
# for s in strings:
#     # Преобразуем строку s и поисковую строку search_query в нижний регистр и проверяем,
#     # содержит ли строка s подстроку search_query
#     if search_query.lower() in s.lower():
#         # Если условие выполняется, то строка s содержит искомую подстроку, и мы выводим её
#         print(s)

# На вход программе подается натуральное число n, затем n строк, затем число k — количество поисковых запросов, затем
# k строк — поисковые запросы. Напишите программу, которая выводит все введеные строки, в которых встречаются одновременно все поисковые запросы.
# s = []  # Инициализируем пустой основной список s
# p = []  # Инициализируем пустой поисковый список p
# # Получаем количество элементов основного списка и добавляем их в список s
# for _ in range(int(input())):
#     s.append(input()) # Получаем количество элементов поискового списка и добавляем их в список p
# for _ in range(int(input())):
#     p.append(input()) # Проходим по каждому элементу i в основном списке s
# for i in s:
#     n = 0  # Инициализируем счетчик совпадений
#     # Проходим по каждому элементу k в поисковом списке p
#     for k in p:
#         # Проверяем, содержит ли элемент i (преобразованный в нижний регистр) подстроку k (преобразованную в нижний регистр)
#         if k.lower() in i.lower():
#             n += 1  # Если совпадение найдено, увеличиваем счетчик
#     # Если счетчик совпадений больше или равен количеству элементов в поисковом списке p
#     if n >= len(p):
#         print(i)  # Выводим элемент из основного списка s
# На вход программе подается натуральное число n, а затем n целых чисел.
# Напишите программу, которая сначала выводит все отрицательные числа, затем нули, а затем все положительные числа, каждое на отдельной строке.
# Числа должны быть выведены в том же порядке, в котором они были введены.
# Инициализируем три пустых списка для хранения отрицательных, нулевых и положительных чисел
# negatives, zeros, positives = [], [], []
# n = int(input())  # Получаем количество чисел
# # Запускаем цикл, который будет выполняться n раз
# for _ in range(n):
#     cur = int(input())  # Получаем текущее число
#
#     # Проверяем значение текущего числа и добавляем его в соответствующий список
#     if cur < 0:
#         negatives.append(cur)
#     elif cur > 0:
#         positives.append(cur)
#     else:
#         zeros.append(cur)
# # Соединяем три списка в один в нужном порядке (сначала отрицательные, затем нули, затем положительные)
# res = negatives + zeros + positives
# # Выводим результат, разделяя элементы переводами строки
# print(*res, sep="\n")
